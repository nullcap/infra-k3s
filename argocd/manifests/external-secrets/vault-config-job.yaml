apiVersion: batch/v1
kind: Job
metadata:
  name: vault-config
  namespace: external-secrets-system
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      serviceAccountName: external-secrets
      containers:
      - name: vault-config
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          # Install required tools
          apk add --no-cache curl jq
          
          # Install vault CLI
          curl -fsSL https://releases.hashicorp.com/vault/1.15.2/vault_1.15.2_linux_amd64.zip -o vault.zip
          unzip vault.zip
          mv vault /usr/local/bin/
          
          # Wait for Vault to be ready and unsealed
          echo "Waiting for Vault to be ready..."
          until vault status 2>/dev/null | grep -q "Sealed.*false"; do
            echo "Waiting for Vault to be unsealed..."
            sleep 10
          done
          
          # Get root token from secret
          echo "Getting root token from secret..."
          ROOT_TOKEN=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.root-token}' 2>/dev/null | base64 -d)
          
          if [ -z "$ROOT_TOKEN" ]; then
            echo "Root token not found in secret, cannot proceed"
            exit 1
          fi
          
          export VAULT_TOKEN="$ROOT_TOKEN"
          export VAULT_ADDR="http://vault.vault.svc.cluster.local:8200"
          export VAULT_SKIP_VERIFY="true"
          
          # Check if kubernetes auth is already enabled
          if vault auth list 2>/dev/null | grep -q "kubernetes/"; then
            echo "Kubernetes auth method already enabled"
          else
            echo "Enabling Kubernetes auth method..."
            vault auth enable kubernetes
          fi
          
          # Configure Kubernetes auth
          echo "Configuring Kubernetes auth..."
          vault write auth/kubernetes/config \
            kubernetes_host="https://kubernetes.default.svc.cluster.local" \
            kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          
          # Create policy for external-secrets
          echo "Creating external-secrets policy..."
          vault policy write external-secrets - <<EOF
          path "secret/data/*" {
            capabilities = ["read"]
          }
          EOF
          
          # Create Kubernetes auth role
          echo "Creating Kubernetes auth role..."
          vault write auth/kubernetes/role/external-secrets \
            bound_service_account_names=external-secrets \
            bound_service_account_namespaces=external-secrets-system \
            policies=external-secrets \
            ttl=1h
          
          echo "Vault configuration completed successfully!"
        env:
        - name: VAULT_ADDR
          value: "http://vault.vault.svc.cluster.local:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
      restartPolicy: OnFailure
