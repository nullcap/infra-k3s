apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault
  namespace: argocd
  labels:
    app.kubernetes.io/name: vault
spec:
  project: default
  source:
    repoURL: https://helm.releases.hashicorp.com
    chart: vault
    targetRevision: "0.27.0"
    helm:
      values: |
        server:
          enabled: true
          
          # Auto-unseal configuration using Kubernetes secret
          extraEnvironmentVars:
            VAULT_SKIP_VERIFY: "true"
          
          # Service account with Vault role annotation
          serviceAccount:
            create: true
            name: vault
            annotations:
              vault.hashicorp.com/role: "vault"
          
          # Enable built-in Kubernetes auth configuration
          authDelegator:
            enabled: true
          
          # UI configuration
          ui:
            enabled: true
          
          # Ingress configuration
          ingress:
            enabled: true
            ingressClassName: traefik
            annotations:
              traefik.ingress.kubernetes.io/router.entrypoints: web
            hosts:
              - host: vault.local
          
          # Vault configuration
          standalone:
            config: |
              ui = true
              
              listener "tcp" {
                tls_disable = 1
                address = "[::]:8200"
                cluster_address = "[::]:8201"
              }
              
              storage "file" {
                path = "/vault/data"
              }
          
          # Post-start script to configure Vault
          postStart:
            - /bin/sh
            - -c
            - |
              # Wait for Vault to be ready
              until vault status 2>/dev/null | grep -q "Sealed.*false"; do
                echo "Waiting for Vault to be unsealed..."
                sleep 5
              done
              
              # Enable Kubernetes auth if not already enabled
              if ! vault auth list 2>/dev/null | grep -q "kubernetes/"; then
                echo "Enabling Kubernetes auth method..."
                vault auth enable kubernetes
              fi
              
              # Configure Kubernetes auth
              echo "Configuring Kubernetes auth..."
              vault write auth/kubernetes/config \
                kubernetes_host="https://kubernetes.default.svc.cluster.local" \
                kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              
              # Create policy for external-secrets
              echo "Creating external-secrets policy..."
              vault policy write external-secrets - <<EOF
              path "secret/data/*" {
                capabilities = ["read"]
              }
              EOF
              
              # Create Kubernetes auth role
              echo "Creating Kubernetes auth role..."
              vault write auth/kubernetes/role/external-secrets \
                bound_service_account_names=external-secrets \
                bound_service_account_namespaces=external-secrets-system \
                policies=external-secrets \
                ttl=1h
              
              # Enable KV secrets engine if not already enabled
              if ! vault secrets list 2>/dev/null | grep -q "secret/"; then
                echo "Enabling KV secrets engine..."
                vault secrets enable -path=secret kv-v2
              fi
              
              echo "Vault configuration completed!"
        
        # Disable injector since we're using External Secrets
        injector:
          enabled: false
  destination:
    namespace: vault
    server: https://kubernetes.default.svc
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
