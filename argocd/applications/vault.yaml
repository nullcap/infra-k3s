apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: vault
    targetRevision: 1.9.0
    helm:
      values: |
        global:
          enabled: true
          tlsDisable: true
        server:
          enabled: true
          serviceAccount:
            create: true
            name: vault
          extraEnvironmentVars:
            VAULT_ADDR: "http://127.0.0.1:8200"
            VAULT_SKIP_VERIFY: "true"
          extraSecretEnvironmentVars:
            VAULT_TRANSIT_TOKEN:
              secretName: vault-autounseal-token
              secretKey: token
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  # Wait for Vault to be ready
                  until vault status; do
                    sleep 5
                  done
                  
                  # Check if Vault is already initialized
                  if vault status | grep -q "Initialized.*true"; then
                    echo "Vault is already initialized"
                    exit 0
                  fi
                  
                  # Initialize Vault with auto-unseal
                  echo "Initializing Vault with auto-unseal..."
                  vault operator init \
                    -recovery-shares=5 \
                    -recovery-threshold=3 \
                    -format=json > /tmp/init.json
                  
                  # Extract root token
                  ROOT_TOKEN=$(cat /tmp/init.json | jq -r '.root_token')
                  export VAULT_TOKEN="$ROOT_TOKEN"
                  
                  # Create transit key
                  echo "Creating transit key..."
                  vault secrets enable transit
                  vault write -f transit/keys/autounseal
                  
                  # Create autounseal policy
                  echo "Creating autounseal policy..."
                  vault policy write autounseal -<<EOF
                  path "transit/encrypt/autounseal" {
                    capabilities = ["update"]
                  }
                  path "transit/decrypt/autounseal" {
                    capabilities = ["update"]
                  }
                  EOF
                  
                  # Create token for auto-unseal
                  echo "Creating auto-unseal token..."
                  AUTOUNSEAL_TOKEN=$(vault token create -orphan -policy="autounseal" -period=24h -format=json | jq -r '.auth.client_token')
                  
                  # Store the auto-unseal token in a secret
                  kubectl create secret generic vault-autounseal-token \
                    --from-literal=token="$AUTOUNSEAL_TOKEN" \
                    --dry-run=client -o yaml | kubectl apply -f -
                  
                  echo "Vault initialization complete!"
                  echo "Root token: $ROOT_TOKEN"
                  echo "Auto-unseal token stored in secret: vault-autounseal-token"
                  
                  # Store root token securely (for manual operations)
                  kubectl create secret generic vault-root-token \
                    --from-literal=token="$ROOT_TOKEN" \
                    --dry-run=client -o yaml | kubectl apply -f -
          authDelegator:
            enabled: true
          readinessProbe:
            enabled: false
          dataStorage:
            enabled: true
            size: 10Gi
            storageClass: ""
          ha:
            enabled: false
          ui:
            enabled: false
          # Configure transit seal
          seal:
            type: "transit"
            transit:
              address: "http://127.0.0.1:8200"
              token: "env://VAULT_TRANSIT_TOKEN"
              disable_renewal: "false"
              key_name: "autounseal"
              mount_path: "transit/"
  destination:
    server: https://kubernetes.default.svc
    namespace: vault
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: v1
kind: Namespace
metadata:
  name: vault
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault
  namespace: vault
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault
  namespace: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: vault
